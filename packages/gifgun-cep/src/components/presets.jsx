import React from 'react';

const DatamoshPresetList = [

    // Default
    {
        type : 'default',
        value : 'multiply',
        label : "Multiply",
        mv0 : `inMV0*(intensity*4)`,
        mv1 : `inMV1*(intensity*4)`,
    },
    {
        type : 'default',
        value : 'addToXAndY',
        label : "Add to x and y",
        mv0 : `inMV0+(10*intensity)`,
        mv1 : `inMV1+(10*intensity)`,
    },
    {
        type : 'default',
        value : 'moveVertical',
        label : "Move vertical",
        mv0 : `0`,
        mv1 : `10*(intensity)`,
    },
    {
        type : 'default',
        value : 'moveHorizontal',
        label : "Move horizontal",
        mv0 : `10*intensity`,
        mv1 : `0`,
    },

    // Zoom

    {
        type : 'zoom',
        value : 'zoom1',
        label : "Zoom",
        mv0 : `(j-(width/2))*-intensity`,
        mv1 : `(i-(height/2))*-intensity`,
    },
    {
        type : 'zoom',
        value : 'zoomSin',
        label : "Zoom sin",
        mv0 : `Math.cos( (Math.sign(intensity) == -1 ? -1*xPercentDone : xPercentDone)*Math.PI) *intensity*40`,
        mv1 : `Math.cos( (Math.sign(intensity) == -1 ? -1*yPercentDone : yPercentDone)*Math.PI) *intensity*40`,
    },
    {
        type : 'zoom',
        value : 'shear',
        label : "Shear",
        mv0 : `((i - width/2) / 100)*intensity*50`,
        mv1 : `((j - height/2) / 100)*intensity*50`,
    },
    
    // Sin Cos
    {
        type : 'sinCos',
        value : 'sinMidX',
        label : "Middle sin X",
        mv0 : `Math.cos( (Math.sign(intensity) == -1 ? -1*xPercentDone : xPercentDone)*Math.PI) *intensity*25`,
        mv1 : `inMV1`,
    },
    {
        type : 'sinCos',
        value : 'sinMidXNoY',
        label : "Middle sin X no Y",
        mv0 : `Math.cos( (Math.sign(intensity) == -1 ? -1*xPercentDone : xPercentDone)*Math.PI) *intensity*25`,
        mv1 : `0`,
    },
    {
        type : 'sinCos',
        value : 'sinMidY',
        label : "Middle sin Y",
        mv0 : `inMV0`,
        mv1 : `Math.cos( (Math.sign(intensity) == -1 ? -1*yPercentDone : yPercentDone)*Math.PI) *intensity*25`,
    },
    {
        type : 'sinCos',
        value : 'sinMidYNoX',
        label : "Middle sin Y no X",
        mv0 : `0`,
        mv1 : `Math.cos( (Math.sign(intensity) == -1 ? -1*yPercentDone : yPercentDone)*Math.PI) *intensity*25`,
    },
    {
        type : 'sinCos',
        value : 'sinOutsideX',
        label : "Outside sin X",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? 1-xPercentDone : xPercentDone)*Math.PI) *intensity*25`,
        mv1 : `inMV1`,
    },
    {
        type : 'sinCos',
        value : 'sinOutsideXNoY',
        label : "Outside sin X no Y",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? 1-xPercentDone : xPercentDone)*Math.PI) *intensity*25`,
        mv1 : `0`,
    },
    {
        type : 'sinCos',
        value : 'sinOutsideY',
        label : "Outside sin Y",
        mv0 : `inMV0`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? 1-yPercentDone : yPercentDone)*Math.PI) *intensity*25`,
    },
    {
        type : 'sinCos',
        value : 'sinOutsideYNoX',
        label : "Outside sin Y no X",
        mv0 : `0`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? 1-yPercentDone : yPercentDone)*Math.PI) *intensity*25`,
    },
    {
        type : 'sinCos',
        value : 'halfSinOutsideX',
        label : "Outside half sin X",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? (1-xPercentDone)*.5 : (xPercentDone)*.5)*Math.PI) *intensity*50`,
        mv1 : `inMV1`,
    },
    {
        type : 'sinCos',
        value : 'halfSinOutsideXNoY',
        label : "Outside half sin X no Y",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? (1-xPercentDone)*.5 : (xPercentDone)*.5)*Math.PI) *intensity*50`,
        mv1 : `0`,
    },
    {
        type : 'sinCos',
        value : 'halfSinOutsideY',
        label : "Outside half sin Y",
        mv0 : `inMV0`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? (1-yPercentDone)*.5 : (yPercentDone)*.5)*Math.PI) *intensity*50`,
    },
    {
        type : 'sinCos',
        value : 'halfSinOutsideYNoX',
        label : "Outside half sin Y no X",
        mv0 : `0`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? (1-yPercentDone)*.5 : (yPercentDone)*.5)*Math.PI) *intensity*50`,
    },
    {
        type : 'sinCos',
        value : 'oscillateSinX',
        label : "Oscillate sin X",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? 1-xPercentDone+(frameNumber*.1) : xPercentDone+(frameNumber*.1))*Math.PI) *intensity*20`,
        mv1 : `inMV1`,
    },
    {
        type : 'sinCos',
        value : 'oscillateSinXNoY',
        label : "Oscillate sin X no Y",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? 1-xPercentDone+(frameNumber*.1) : xPercentDone+(frameNumber*.1))*Math.PI) *intensity*20`,
        mv1 : `0`,
    },
    {
        type : 'sinCos',
        value : 'oscillateSinY',
        label : "Oscillate sin Y",
        mv0 : `inMV0`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? 1-yPercentDone+(frameNumber*.1) : yPercentDone+(frameNumber*.1))*Math.PI) *intensity*20`,
    },
    {
        type : 'sinCos',
        value : 'oscillateSinYnoX',
        label : "Oscillate sin Y no X",
        mv0 : `0`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? 1-yPercentDone+(frameNumber*.1) : yPercentDone+(frameNumber*.1))*Math.PI) *intensity*20`,
    },
    {
        type : 'sinCos',
        value : 'oscillateSinXY',
        label : "Oscillate sin X&Y",
        mv0 : `Math.sin( (Math.sign(intensity) == -1 ? 1-xPercentDone+(frameNumber*.1) : xPercentDone+(frameNumber*.1))*Math.PI) *intensity*20`,
        mv1 : `Math.sin( (Math.sign(intensity) == -1 ? 1-yPercentDone+(frameNumber*.1) : yPercentDone+(frameNumber*.1))*Math.PI) *intensity*20`,
    },
    {
        type : 'sinCos',
        value : 'rightHorizontalSinTaperedV1',
        label : "Right horizontal sin tapered V1",
        mv0 : `j > (width/2) ? -20*intensity : inMV0`,
        mv1 : `j > (width/2) ? Math.cos(yPercentDone*Math.PI*(xPercentDone*2)) *intensity*20 : inMV1`,
    },
    {
        type : 'sinCos',
        value : 'leftHorizontalSinTaperedV1',
        label : "Left horizontal sin tapered V1",
        mv0 : `j < (width/2) ? 20*intensity : inMV0`,
        mv1 : `j < (width/2) ? Math.cos(yPercentDone*Math.PI*(.5+xPercentDone*2)) *intensity*20 : inMV1`,
    },
    {
        type : 'sinCos',
        value : 'BothHorizontalSinTaperedV1',
        label : "Horizontal sin tapered V1",
        mv0 : `j < (width/2) ? 20*intensity : -20*intensity`,
        mv1 : `j < (width/2) ? Math.cos(yPercentDone*Math.PI*(.5+xPercentDone*2)) *intensity*20 : Math.cos(yPercentDone*Math.PI*(xPercentDone*2)) *intensity*20`,
    },
    {
        type : 'sinCos',
        value : 'rightHorizontalSinTaperedV2',
        label : "Right horizontal sin tapered V2",
        mv0 : `j > (width/2) ? -20*intensity : inMV0`,
        mv1 : `j > (width/2) ? Math.sin(intensity*20*yPercentDone*Math.PI*((xPercentDone-.5)/.5)+(markerCompletion*10)) *intensity*20*((xPercentDone-.5)/.5) : inMV1`,
    },
    {
        type : 'sinCos',
        value : 'leftHorizontalSinTaperedV2',
        label : "Left horizontal sin tapered V2",
        mv0 : `j < (width/2) ? 20*intensity : inMV0`,
        mv1 : `j < (width/2) ? Math.sin(intensity*20*yPercentDone*Math.PI*((.5-xPercentDone)/.5)+(markerCompletion*10)) *intensity*20*((.5-xPercentDone)/.5) : inMV1`,
    },
    {
        type : 'sinCos',
        value : 'topVerticalSinTaperedV2',
        label : "Top vertical sin tapered V2",
        mv0 : `i < (height/2) ?  Math.sin(intensity*20*xPercentDone*Math.PI*((.5-yPercentDone)/.5)+(markerCompletion*10)) *intensity*20*((.5-yPercentDone)/.5) : inMV0`,
        mv1 : `i < (height/2) ? 20*intensity : inMV1`,
    },
    {
        type : 'sinCos',
        value : 'bottomVerticalSinTaperedV2',
        label : "Bottom vertical sin tapered V2",
        mv0 : `i > (height/2) ?  Math.sin(intensity*20*xPercentDone*Math.PI*((yPercentDone-.5)/.5)+(markerCompletion*10)) *intensity*20*((yPercentDone-.5)/.5) : inMV0`,
        mv1 : `i > (height/2) ? -20*intensity : inMV1`,
    },
    {
        type : 'sinCos',
        value : 'horizontalSinTaperedV2',
        label : "Horizontal sin tapered V2",
        mv0 : `j < (width/2) ? 20*intensity : -20*intensity`,
        mv1 : `j < (width/2) ? Math.sin(intensity*20*yPercentDone*Math.PI*((.5-xPercentDone)/.5)+(markerCompletion*10)) *intensity*20*((.5-xPercentDone)/.5) : Math.sin(intensity*20*yPercentDone*Math.PI*((xPercentDone-.5)/.5)+(markerCompletion*10)) *intensity*20*((xPercentDone-.5)/.5)`,
    },
    {
        type : 'sinCos',
        value : 'taperedSinWave',
        label : "Horizontal sin tapered v3",
        mv0 : `inMV0`,
        mv1 : `j < (width/2) ? Math.sin(intensity*20*yPercentDone*Math.PI*((.5-xPercentDone)/.5)+(markerCompletion*10)) *intensity*20*((.5-xPercentDone)/.5) : Math.sin(intensity*20*yPercentDone*Math.PI*((xPercentDone-.5)/.5)+(markerCompletion*10)) *intensity*20*((xPercentDone-.5)/.5)`,
    },
    {
        type : 'sinCos',
        value : 'cosXSinY',
        label : "Cos X & sin Y",
        mv0 : ` Math.cos(xPercentDone*Math.PI*2)*intensity*20`,
        mv1 : `Math.sin(yPercentDone*Math.PI*2)*intensity*20`,
    },
    {
        type : 'sinCos',
        value : 'sinXCosY',
        label : "Sin X & cos Y",
        mv0 : ` Math.sin(j/height*Math.PI*2)*intensity*20`,
        mv1 : `Math.cos(i/width*Math.PI*2)*intensity*20`,
    },

    // AVEREAGE
    {
        type : 'average',
        value : 'averageXY',
        label : "Average X and Y",
        mv0 : `((inMV0+inMV1)/2)*intensity`,
        mv1 : `((inMV0+inMV1)/2)*intensity`,
    },
    {
        type : 'average',
        value : 'average3',
        label : "Average previous 3",
        mv0 : `average_mv(0,i, j,3, 0)*intensity`,
        mv1 : `average_mv(0,i, j,3, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'average5',
        label : "Average previous 5",
        mv0 : `average_mv(0,i, j,5, 0)*intensity`,
        mv1 : `average_mv(0,i, j,5, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'average10',
        label : "Average previous 10",
        mv0 : `average_mv(0,i, j,10, 0)*intensity`,
        mv1 : `average_mv(0,i, j,10, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'average15',
        label : "Average previous 15",
        mv0 : `average_mv(0,i, j,15, 0)*intensity`,
        mv1 : `average_mv(0,i, j,15, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'average20',
        label : "Average previous 20",
        mv0 : `average_mv(0,i, j,20, 0)*intensity`,
        mv1 : `average_mv(0,i, j,20, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'averageNeighbors1',
        label : "Average 1 neighbors",
        mv0 : `averageNeighbors(i, j, 1, 0)*intensity`,
        mv1 : `averageNeighbors(i, j, 1, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'averageNeighbors2',
        label : "Average 2 neighbors",
        mv0 : `averageNeighbors(i, j, 2, 0)*intensity`,
        mv1 : `averageNeighbors(i, j, 2, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'averageNeighbors3',
        label : "Average 3 neighbors",
        mv0 : `averageNeighbors(i, j, 3, 0)*intensity`,
        mv1 : `averageNeighbors(i, j, 3, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'averageNeighbors4',
        label : "Average 4 neighbors",
        mv0 : `averageNeighbors(i, j, 4, 0)*intensity`,
        mv1 : `averageNeighbors(i, j, 4, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'addprevious3',
        label : "Add previous 3",
        mv0 : `add_mv(0, i, j, 3, 0)*intensity`,
        mv1 : `add_mv(0, i, j, 3, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'addprevious5',
        label : "Add previous 5",
        mv0 : `add_mv(0,i, j, 5, 0)*intensity`,
        mv1 : `add_mv(0, i, j, 5, 1)*intensity`,
    },
    {
        type : 'average',
        value : 'addprevious10',
        label : "Add previous 10",
        mv0 : `add_mv(0, i, j, 10, 0)*intensity`,
        mv1 : `add_mv(0, i, j, 10, 1)*intensity`,
    },

    // Spatial
    {
        type : 'spatial',
        value : 'multiplyByX',
        label : "Multiply by X",
        mv0 : `inMV0*(j*intensity*.1)+1`,
        mv1 : `inMV1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByXNoY',
        label : "Multiply by X no Y",
        mv0 : `inMV0*(j*intensity*.1)+1`,
        mv1 : `0`,
    },
    {
        type : 'spatial',
        value : 'multiplyByY',
        label : "Multiply by Y",
        mv0 : `inMV0`,
        mv1 : `inMV1*(i*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByYNoX',
        label : "Multiply by Y no X",
        mv0 : `0`,
        mv1 : `inMV1*(i*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByInvX',
        label : "Multiply by inverse X",
        mv0 : `inMV0*((width - j)*intensity*.1)+1`,
        mv1 : `inMV1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByInvXNoY',
        label : "Multiply by inverse X no Y",
        mv0 : `inMV0*((width - j)*intensity*.1)+1`,
        mv1 : `0`,
    },
    {
        type : 'spatial',
        value : 'multiplyByInvY',
        label : "Multiply by inverse Y",
        mv0 : `inMV0`,
        mv1 : `inMV1*((height-i)*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByInvYNoX',
        label : "Multiply by inverse Y no X",
        mv0 : `0`,
        mv1 : `inMV1*((height-i)*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByXY',
        label : "Multiply by X&Y",
        mv0 : `inMV0*(j*intensity*.1)+1`,
        mv1 : `inMV1*(i*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByInvXY',
        label : "Multiply by inverse X&Y",
        mv0 : `inMV0*((width - j)*intensity*.1)+1`,
        mv1 : `inMV1*((height - i)*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByXAndInvY',
        label : "Multiply by X & inverse Y",
        mv0 : `inMV0*(j*intensity*.1)+1`,
        mv1 : `inMV1*((height - i)*intensity*.1)+1`,
    },
    {
        type : 'spatial',
        value : 'multiplyByYAndInvX',
        label : "Multiply by Y & inverse X",
        mv0 : `inMV0*((width - j)*intensity*.1)+1`,
        mv1 : `inMV1*(i*intensity*.1)+1`,
    },

    // Random
    {
        type : 'random',
        value : 'random1',
        label : "Random Blocks 1",
        mv0 : `randomBlocks(0,i,j,10, .1,.2, .5,.8, 4,inMV0,inMV1)? 0 : inMV0`,
        mv1 : `randomBlocks(1,i,j)? -40 : inMV1`,
    },
    {
        type : 'random',
        value : 'random2',
        label : "Random Blocks 2",
        mv0 : `randomBlocks(0,i,j,10, .2,.1, .3,.8, 4,inMV0,inMV1)? 0 : inMV0`,
        mv1 : `randomBlocks(1,i,j)? -40 : inMV1`,
    },
    {
        type : 'random',
        value : 'random3',
        label : "Random Blocks 3",
        mv0 : `randomBlocks(0,i,j,2, .1,.1, .3,.8, 10,inMV0,inMV1)? 0 : inMV0`,
        mv1 : `randomBlocks(1,i,j)? -40*intensity : inMV1`,
    },
    {
        type : 'random',
        value : 'random4',
        label : "Random Blocks 4",
        mv0 : `randomBlocks(0,i,j,30, .5,.1, .3,.8, 3,inMV0,inMV1)? 0 : inMV0`,
        mv1 : `randomBlocks(1,i,j)? -40*intensity : inMV1`,
    },
    {
        type : 'random',
        value : 'random5',
        label : "Random Blocks 5",
        mv0 : `randomBlocks(0,i,j,15, .2,.2, .3,.8, 7,inMV0,inMV1)? 0 : inMV0`,
        mv1 : `randomBlocks(1,i,j)? -40*intensity : inMV1`,
    },

    // Mirror
    {
        type : 'mirror',
        value : 'mirrorLeft',
        label : "Mirror left",
        mv0 : `j>width/2 ? prev_fwd_mvs[0][i][((width - 1) - j)][0]*intensity*-1 : mv0`,
        mv1 : `j>width/2 ? prev_fwd_mvs[0][i][((width - 1) - j)][1]*intensity : mv1`,
    },
    {
        type : 'mirror',
        value : 'mirrorRight',
        label : "Mirror right",
        mv0 : `j<width/2 ? prev_fwd_mvs[0][i][((width - 1) - j)][0]*intensity*-1 : mv0`,
        mv1 : `j<width/2 ? prev_fwd_mvs[0][i][((width - 1) - j)][1]*intensity : mv1`,
    },
    {
        type : 'mirror',
        value : 'mirrortop',
        label : "Mirror top",
        mv0 : `i>height/2 ? prev_fwd_mvs[0][((height - 1) - i)][j][0]*intensity : mv0`,
        mv1 : `i>height/2 ? prev_fwd_mvs[0][((height - 1) - i)][j][1]*intensity*-1 : mv1`,
    },
    {
        type : 'mirror',
        value : 'mirrorBottom',
        label : "Mirror bottom",
        mv0 : `i<height/2 ? prev_fwd_mvs[0][((height - 1) - i)][j][0]*intensity : mv0`,
        mv1 : `i<height/2 ? prev_fwd_mvs[0][((height - 1) - i)][j][1]*intensity*-1 : mv1`,
    },
    
    // Sweep
    {
        type : 'sweep',
        value : 'sweepVertical',
        label : "Sweep vertical",
        mv0 : `markerCompletion > yPercentDone ? 0 : inMV0`,
        mv1 : `markerCompletion > yPercentDone ? intensity*100 : inMV1`,
    },
    {
        type : 'sweep',
        value : 'sweepVerticalOpp',
        label : "Sweep vertical opposite",
        mv0 : `markerCompletion > 1-yPercentDone ? 0 : inMV0`,
        mv1 : `markerCompletion > 1-yPercentDone ? intensity*100 : inMV1`,
    },
    {
        type : 'sweep',
        value : 'sweepHorizontal',
        label : "Sweep horizontal",
        mv0 : `markerCompletion > xPercentDone ? intensity*100 : inMV0`,
        mv1 : `markerCompletion > xPercentDone ? 0 : inMV1`,
    },
    {
        type : 'sweep',
        value : 'sweepHorizontalOpp',
        label : "Sweep horizontal opposite",
        mv0 : `markerCompletion > 1-xPercentDone ? intensity*100 : inMV0`,
        mv1 : `markerCompletion > 1-xPercentDone ? 0 : inMV1`,
    },


    // Experimental
    {
        type : 'experimental',
        value : 'swapMVs',
        label : "Swap",
        mv0 : `inMV0`,
        mv1 : `inMV1`,
    },
];

export default DatamoshPresetList;